<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brandon Clapp</title>
    <description>Web Developer &amp; Designer
</description>
    <link>http://brandonclapp.com/</link>
    <atom:link href="http://brandonclapp.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 29 May 2016 17:55:32 -0500</pubDate>
    <lastBuildDate>Sun, 29 May 2016 17:55:32 -0500</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Git guide and useful commands</title>
        <description>&lt;p&gt;Git can be a very powerful tool for developers if they know what they’re doing, However, if they don’t, the workflow feels more like an obstacle. Although I agree that it can take a bit to understand the fundamentals of git, I strongly believe that learning it is a great investment. Lets start with some basic terminology. Don’t get discouraged if you don’t understand them right now.&lt;/p&gt;

&lt;h3 id=&quot;terminology&quot;&gt;Terminology&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Commit:&lt;/strong&gt; A snapshot of changes to files that have been modified. Before making a commit, the files must be &lt;em&gt;staged&lt;/em&gt;. This means that they must be tracked and added to the staging area by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staging area:&lt;/strong&gt; Before making a commit, tracked files must be &lt;em&gt;staged&lt;/em&gt;. Modified, deleted, added, or moved files that are tracked are eligible to be staged. The &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; command can be used to stage these modifications. Once staged, the staged files are eligible to be committed with the &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote:&lt;/strong&gt; Because git is a distributed source control system, this means that the source control resides on both remotely and local. For this reason, any repository that is located remotely (i.e. on github) is considered to be a remote repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local:&lt;/strong&gt; The opposite of remote. This is the repository as it lives locally. You can &lt;em&gt;clone&lt;/em&gt; a remote repository locally or use &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; to initialize a local repository. Local repositories can be linked to remote repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HEAD:&lt;/strong&gt; In git, HEAD refers to the last commit on the current branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone:&lt;/strong&gt; The process of pulling the source code from a repository hosted remotely to your local machine, creating a local repository, and then associating that local repository with the remote that it was pulled/cloned from.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branch:&lt;/strong&gt; A branch can be thought of as an alternate timeline for your repository’s code. By default, when initializing or cloning a repository, a master branch will be created. Creating a new branch will house commits/changes that are not present on the master branch until they are eventually merged back in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fast-forward:&lt;/strong&gt; When merging, if the target branch does not contain commits outside of those from the incoming source branch, then the target can simply “fast-forward” it’s HEAD to the latest commit on the source branch once it is merged.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recursive merge:&lt;/strong&gt; When merging, unlike the fast forward, if the target branch contains commits not included by the source branch, a recursive strategy is needed. This will merge all commits into the single target branch and then create a single “merge commit” stating that the branches have merged back together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Tags are references to specific commits and can be useful for specifying the state of your project at any given point. For example, a tag called v1.0 could be created to represent a specific version of the project and make it easier to reference this commit rather than remembering a commit identifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rebase:&lt;/strong&gt; Can be used to integrate changes from one branch to another, much like merge. Rebase will do 3 things.
- Move all commits that are on the current local branch to a temporary area.
- Add all of the commits from the specified source branch (from branch) to the current branch.
- Add all of the commits from the aforementioned temporary area back onto the current branch.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing!&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;setup--basics&quot;&gt;Setup &amp;amp; Basics&lt;/h3&gt;

&lt;h5 id=&quot;git-init&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Initializes a local git repository&lt;/p&gt;

&lt;h5 id=&quot;git-config---global-username-brandon-clapp&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.name &quot;Brandon Clapp&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sets the global git user name to be used when making commits.&lt;/p&gt;

&lt;h5 id=&quot;git-config---global-useremail-memyemailcom&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.email me@myemail.com&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sets the global git email to be used when making commits.&lt;/p&gt;

&lt;h5 id=&quot;git-config---global-colorui-true&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global color.ui true&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sets the global git setting for adding pretty colors on command line&lt;/p&gt;

&lt;h5 id=&quot;git-status&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Check which tracked files have been modified since the last commit, as well as untracked files..&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;adding-files-to-staging&quot;&gt;Adding files to staging&lt;/h3&gt;

&lt;h5 id=&quot;git-add--or-git-add---all&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add --all&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Add all files and folders that are part of your current working directory to the staging area.&lt;/p&gt;

&lt;h5 id=&quot;git-add-filename&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Add a single file to the staging area.&lt;/p&gt;

&lt;h5 id=&quot;git-add-list-of-files&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;list of files&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Adds multiple files. Files are delimited by spaces.&lt;/p&gt;

&lt;h5 id=&quot;git-add-ext&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add *.&amp;lt;ext&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Adds all files with the provided extension to the staging area. i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add *.txt&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-add-folderext&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;folder&amp;gt;/*.&amp;lt;ext&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Adds all files in the docs folder with a &lt;em&gt;.txt&lt;/em&gt; extension to the staging area. i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;git add docs/*.txt&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-add-ext-1&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &quot;*.&amp;lt;ext&amp;gt;&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Adds all files of a the provided extension in &lt;em&gt;the whole project&lt;/em&gt; to the staging area.&lt;/p&gt;

&lt;h5 id=&quot;git-add-foldername&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;foldername&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Add a single folder and all associated modified files/folders in that folder to the staging area.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;removing-files-from-staging&quot;&gt;Removing files from staging&lt;/h3&gt;

&lt;h5 id=&quot;git-reset-head-file&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Removes the file from staging, but keeps any modifications made to that file.&lt;/p&gt;

&lt;h3 id=&quot;undoing-changes&quot;&gt;Undoing changes&lt;/h3&gt;

&lt;h5 id=&quot;git-checkout----file&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Undo all changes to a specific file. i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -- README.md&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-checkout-&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout .&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Undo all changes for all tracked files and folders in the current working directory&lt;/p&gt;

&lt;h5 id=&quot;git-reset---hard-head&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard HEAD&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Undo all changes for all files and folders (including untracked) back to the HEAD commit.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;creating-a-commit&quot;&gt;Creating a commit&lt;/h3&gt;

&lt;h5 id=&quot;git-commit--m-create-a-readme&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Create a README.&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Creates a commit of all files that are currently in the staging area.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; flag followed by “Create a README” represents the message that will be associated with the commit, or the &lt;em&gt;commit message&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once committed, this “snapshot” of changes is added to the top of your timeline tree.&lt;/p&gt;

&lt;h5 id=&quot;git-commit--a--m-my-commit-message-or-git-commit--am-my-commit-message&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -a -m &quot;My commit message.&quot;&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -am &quot;My commit message.&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Add all tracked files in the current working directory to staging &lt;strong&gt;and&lt;/strong&gt; commit them with the message &lt;em&gt;My commit message&lt;/em&gt; in a single step. This however, does not include untracked files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;undoing-a-commit&quot;&gt;Undoing a commit&lt;/h3&gt;

&lt;h5 id=&quot;git-reset---soft-head-potentially-dangerous&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --soft HEAD^&lt;/code&gt;&lt;/strong&gt; (potentially dangerous)&lt;/h5&gt;

&lt;p&gt;Undo the last commit (HEAD) and move everything from that commit back into staging on the commit before it (HEAD^).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Caution:&lt;/em&gt; Never do this when the commit has already been pushed to a remote repository. Rewriting history is dangerous.&lt;/p&gt;

&lt;h5 id=&quot;git-reset---hard-head-potentially-dangerous&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard HEAD^&lt;/code&gt;&lt;/strong&gt; (potentially dangerous)&lt;/h5&gt;

&lt;p&gt;Undo last commit and all pending changes to tracked files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Caution:&lt;/em&gt; Never do this when the commit has already been pushed to a remote repository. Rewriting history is dangerous.&lt;/p&gt;

&lt;h5 id=&quot;git-reset---hard-head-potentially-dangerous-1&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard HEAD^^&lt;/code&gt;&lt;/strong&gt; (potentially dangerous)&lt;/h5&gt;

&lt;p&gt;Undo last 2 commits and all pending changes to tracked files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Caution:&lt;/em&gt; Never do this when the commit has already been pushed to a remote repository. Rewriting history is dangerous.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;amending-to-a-commit&quot;&gt;Amending to a commit&lt;/h3&gt;

&lt;h5 id=&quot;git-commit---amend--m-my-new-commit-message-potentially-dangerous&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --amend -m &quot;My new commit message&quot;&lt;/code&gt;&lt;/strong&gt; (potentially dangerous)&lt;/h5&gt;

&lt;p&gt;Add to the last commit. Optionally, a new commit message can be provided with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;, which will overwrite the previous commit message.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Caution:&lt;/em&gt; Never do this when the commit has already been pushed to a remote repository. Rewriting history is dangerous.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;viewing-commit-history&quot;&gt;Viewing commit history&lt;/h3&gt;

&lt;h5 id=&quot;git-log&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Shows the latest commits and information about them, including their commit message and date.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;checking-file-modifications&quot;&gt;Checking File Modifications&lt;/h3&gt;

&lt;h5 id=&quot;git-diff&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Show unstaged differences since last commit.&lt;/p&gt;

&lt;h5 id=&quot;git-diff---staged&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --staged&lt;/code&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Show differences on staged files since last commit.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 09:15:00 -0500</pubDate>
        <link>http://brandonclapp.com/git/github/git-guide-useful-commands</link>
        <guid isPermaLink="true">http://brandonclapp.com/git/github/git-guide-useful-commands</guid>
        
        
        <category>git</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>This is just a test post 8</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 22 May 2016 13:21:41 -0500</pubDate>
        <link>http://brandonclapp.com/testing/this-is-just-a-test-post-8</link>
        <guid isPermaLink="true">http://brandonclapp.com/testing/this-is-just-a-test-post-8</guid>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 15 May 2016 13:21:41 -0500</pubDate>
        <link>http://brandonclapp.com/jekyll/update/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://brandonclapp.com/jekyll/update/welcome-to-jekyll</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Test Blog Post</title>
        <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tristique lorem et dui feugiat ultricies. In hac habitasse platea dictumst. Sed ultricies, lacus id scelerisque faucibus, lorem neque molestie ipsum, et hendrerit diam justo ac magna. Sed pulvinar suscipit dui, non bibendum mi commodo ac. Quisque eget erat ipsum. Praesent vitae nibh porta, viverra arcu nec, auctor elit. Ut ut diam laoreet, ullamcorper leo nec, interdum sem. Phasellus turpis est, ultrices quis ultrices eu, sodales vitae risus. Aenean sollicitudin diam sed egestas scelerisque. Sed sed euismod nulla, et sollicitudin metus. Pellentesque et est ut eros dignissim dignissim ut non orci.&lt;/p&gt;

&lt;p&gt;Integer ultrices nibh eu dignissim accumsan. Quisque commodo, neque a consequat ullamcorper, ante purus iaculis ex, nec posuere purus felis quis purus. Nullam hendrerit at nisi ut tempus. Sed vitae lorem mi. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas ullamcorper tellus id nisl ultricies, id condimentum elit tristique. Nunc et malesuada odio, sit amet hendrerit risus. Integer sit amet nisi felis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec et nisi ut massa laoreet scelerisque eu id lectus.&lt;/p&gt;

&lt;p&gt;Donec dapibus eros ac viverra cursus. Nulla lacinia lacus in nunc elementum, a consectetur sapien pulvinar. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nulla facilisi. Duis vehicula condimentum elit. Aenean tincidunt et justo a mattis. In sed urna sit amet nisl accumsan ullamcorper. Mauris semper aliquam congue. Vivamus blandit pellentesque rutrum. Vestibulum vulputate urna eget lobortis cursus. Cras facilisis, mi vel bibendum laoreet, sem libero sollicitudin arcu, quis tincidunt massa urna ut nulla. In aliquet ipsum purus, sed faucibus justo dignissim vitae. Suspendisse faucibus lacus sit amet arcu sodales, ac scelerisque nisi dictum. Aliquam sit amet lorem quis augue consectetur vestibulum et sed lectus. Nam euismod, justo sed gravida faucibus, justo enim tristique magna, vitae condimentum nibh nulla a neque. Aliquam id nunc imperdiet, dapibus quam non, vestibulum dolor.&lt;/p&gt;

&lt;p&gt;Etiam lobortis diam lorem, vitae dictum nunc maximus vel. Nam ullamcorper ante ligula, ac varius quam scelerisque at. Vestibulum ut commodo lacus, non laoreet nulla. Vivamus quis nisi mauris. Nunc sit amet dictum libero, quis consequat orci. Nam nec posuere orci, scelerisque sollicitudin magna. Vestibulum commodo varius lacus, sit amet venenatis ex.&lt;/p&gt;

&lt;p&gt;Nullam nec lacinia dui. Etiam sit amet lacus vulputate, aliquet velit a, mattis nibh. Curabitur non lacus libero. Praesent eget metus nec turpis iaculis aliquet. Nulla finibus pretium sem iaculis porttitor. Maecenas ut purus dui. Donec vestibulum dictum quam ac semper. Vivamus eleifend nisl sed purus eleifend, at rhoncus mi faucibus. Quisque diam nisi, malesuada et turpis quis, posuere tincidunt risus. Mauris non metus risus. Sed tristique dictum nibh, sit amet viverra urna aliquet nec.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 May 2016 13:21:41 -0500</pubDate>
        <link>http://brandonclapp.com/test-blog-post/</link>
        <guid isPermaLink="true">http://brandonclapp.com/test-blog-post/</guid>
        
        <category>this</category>
        
        <category>is</category>
        
        <category>a</category>
        
        <category>test</category>
        
        
        <category>dev</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>What is a Singleton? How do I implement it? And when do I use it?</title>
        <description>&lt;p&gt;This explanation will use C# to explain the basic ideas of a singleton and the singleton pattern. Keep in mind that if you’re using a programming language that doesn’t support classes, this explanation may require a bit more analysis.&lt;/p&gt;

&lt;h4 id=&quot;what-is-a-singleton&quot;&gt;What is a singleton?&lt;/h4&gt;

&lt;p&gt;A singleton is simply a class which only allows a single instance. You can’t new up instances of a singleton class. Static classes in C# are a good example of singleton behavior because, in most cases, there can only ever be one instance of a static class.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Scratchpad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This is valid.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// This is a compile time error.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Logging!
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Static classes do not have constructors, are sealed (you can’t derive from them), and are abstract (you can’t instantiate it directly). While static classes and singleton implementations are very similar in behavior, there are differences. The differences can be &lt;a href=&quot;http://stackoverflow.com/a/519536/1730061&quot; target=&quot;_blank&quot;&gt;summed up by Jon Skeet&lt;/a&gt; as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A singleton allows access to a single created instance - that instance
(or rather, a reference to that instance) can be passed as a parameter
to other methods, and treated as a normal object.
A static class allows only static methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you only need static methods from your singleton, then just use a static class to expose these static methods - There is no reason to implement your own singleton. However, if you need to be able to use your singleton as if it were a regular instance of a class, then read on.&lt;/p&gt;

&lt;p&gt;The single instance of the class will be distributed from logic internal to our singleton implementation. It must ensure that one, and only one, instance is ever created. Now that we know vaguely what a singleton is, lets look at how we might implement one.&lt;/p&gt;

&lt;h4&gt;How do I implement a singleton?&lt;/h4&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Scratchpad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The first time, we get a new instance of Instance
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// The second time,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// Instance is a references to the first one created.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi there&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Private constructor,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// which cannot be called to create new instances.
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// Stuff that should only happen once
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// If our private instance field is null
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// new up an instance
&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// and store it in our private field.
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Logging.
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, our &lt;strong&gt;Logger&lt;/strong&gt; class has a private constructor. This restricts outside sources from creating &lt;em&gt;new&lt;/em&gt; instances of the class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Instance&lt;/code&gt; property on the Logger class has a getter which holds the logic for how the entire class is referenced. First, we check to see if &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt;, a private field of type Logger, is null. If it is, then we’re going to assume that it hasn’t been accessed before, and therefore it is okay to new up an instance of the Logger class and store it into the private field.&lt;/p&gt;

&lt;p&gt;The next time that the getter is called, the private field, &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt;, will no longer be null. In fact, it will refer to the Logger object that we created the first time that it was accessed. Rather than creating a new instance again, the original is returned.&lt;/p&gt;

&lt;p&gt;While this conveys the basic idea of what a singleton is supposed to do, there is still one problem. Concurrency. &lt;strong&gt;The previous code only works for a single thread.&lt;/strong&gt; Keep in mind, though, that even if you don’t intend to use the code that you write in a multi-threaded fashion, that doesn’t stop others from doing so.&lt;/p&gt;

&lt;h4 id=&quot;threading-with-singletons&quot;&gt;Threading with Singleton’s&lt;/h4&gt;

&lt;p&gt;In the previous code example, we created an implementation for a singleton, however, we didn’t account for what would happen if multiple threads were trying to access our &lt;code class=&quot;highlighter-rouge&quot;&gt;Instance&lt;/code&gt; property at the same time. There is a possibility that two threads will attempt to check if the conditional statement&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;instance == null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is true at the same time. Suppose that this line is being run by two (or more) threads at the same time, but neither thread has actually created a new instance and assigned it to the private &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; field. The outcome of this scenario would result in multiple instances of our singleton, meaning that our singleton implementation currently is not thread safe.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2009/10/19/what-is-this-thing-you-call-thread-safe.aspx&quot; target=&quot;_blank&quot;&gt;What is this thing you call thread safe?&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Only one thread can get into this
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// block of code at a time now.
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Doing logging.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To fix this issue, we first start by creating a static readonly field object named mutex. If you’re not familiar with what a mutex is, it’s discussed in &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms173179.aspx&quot; target=&quot;_blank&quot;&gt;Thread Synchronization&lt;/a&gt; on MSDN. The following is the best definition that I’ve been able to find.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt;&lt;/strong&gt; - A mutual exclusion object that allows multiple threads to synchronize access to a shared resource. A mutex has two states; locked and unlocked. Once a mutex has been locked by a thread, other threads attempting to lock it will block (stop until the lock has been removed). When the locking thread unlocks (releases) the mutex, one of the blocked threads will acquire (lock) it and proceed.&lt;/p&gt;

&lt;p&gt;Locking can get very complicated, and I’m by no means the person that you want explaining it. The point is, though, that using singleton’s with multiple threads can present it’s own set of problems, and in most cases, even make the singleton implementation more work than it’s worth. In most cases, a static class with static methods is the easier approach.&lt;/p&gt;

&lt;h4 id=&quot;when-to-use-a-singleton&quot;&gt;When to use a singleton&lt;/h4&gt;

&lt;p&gt;Singletons and static classes with static data members are nothing more than global variables with fancy packaging. When you get right down to it, this is all a singleton is. There are few cases when global objects make sense. One scenario that is commonly used for singleton’s is logging. It wouldn’t make much sense to create multiple instances of the same logger, right? In many cases, you start with the idea that you’ll only ever need one logger, but what happens when you suddenly need an email logger and a chat logger? Consider that you’re using a singleton to reference your database. What happens when another database gets added to your project? Also, few objects that we create will be used everywhere within our application, so having this global behavior may not make sense in most cases. Because of it’s global nature and not adhering to an object oriented paradigm, some also consider it to be an anti-pattern. Instead, an easier approach may be to use regular classes that can be instantiated and simply only instantiate them once.&lt;/p&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Singleton’s are often thought of to be an anti-pattern.&lt;/li&gt;
  &lt;li&gt;The general consensus is that singleton’s are bad.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1020312/are-singletons-really-that-bad&quot; target=&quot;_blank&quot;&gt;Are singleton’s really that bad?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons&quot; target=&quot;_blank&quot;&gt;What is so bad about singletons?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Implementing a singleton requires additional threading considerations.&lt;/li&gt;
  &lt;li&gt;In most cases, you don’t need to implement your own singleton. Static classes with static methods work just as well.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 00:00:00 -0500</pubDate>
        <link>http://brandonclapp.com/what-is-a-singleton-how-do-i-implement-it-and-when-do-i-use-it/</link>
        <guid isPermaLink="true">http://brandonclapp.com/what-is-a-singleton-how-do-i-implement-it-and-when-do-i-use-it/</guid>
        
        <category>Singleton</category>
        
        <category>Design Pattern</category>
        
        
        <category>Design</category>
        
        <category>Patterns</category>
        
      </item>
    
      <item>
        <title>Creating and importing a map for Phaser using Tiled</title>
        <description>&lt;p&gt;Phaser is an HTML5 game engine that comes with a lot of cool features that I’ve yet to figure out. Here, I’ll give you a walk through of designing a map utilizing a tool called &lt;strong&gt;Tiled&lt;/strong&gt; and then bringing that map into your phaser project.&lt;/p&gt;

&lt;h4 id=&quot;create-the-phaser-game-object&quot;&gt;Create the Phaser Game object&lt;/h4&gt;

&lt;p&gt;I first set up some basic project scaffolding within phaser, such as setting up the phaser game object, which will actually represent the game within our browser.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you’re not familiar with phaser, what the above code will effectively do is set up a phaser game object with a width and height of the user’s viewable screen and wire up the event handlers that will be called when phaser calls it’s preload, create, and update events. We simply using the overload of the phaser &lt;a href=&quot;http://docs.phaser.io/Phaser.Game.html&quot; target=&quot;_blank&quot;&gt;Game class&lt;/a&gt; that takes 5 parameters.&lt;/p&gt;

&lt;h4 id=&quot;create-your-tilemap-using-tiled&quot;&gt;Create your tilemap using Tiled&lt;/h4&gt;

&lt;p&gt;There is a great tool called &lt;a href=&quot;http://www.mapeditor.org/&quot; target=&quot;_blank&quot;&gt;Tiled Map Editor&lt;/a&gt;, which will allow you to create orthogonal, isometric, and staggered maps. I’ll be demonstrating the basics of using this tool using some free graphics from Open Game Art. Save the following sprite sheet and download the map editor specified above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/content/terrain_atlas.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/posts/content/terrain_atlas.png&quot; alt=&quot;Terrain Atlas&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After downloading and installing Tiled, open it up. At first, the UI can seem a little overwhelming if you don’t know what you’re looking at. We’ll start by first creating a new map by pressing the &lt;em&gt;New&lt;/em&gt; icon in the upper left hand corner. We’ll use the default settings, which specify that our map should have an Orthogonal orientation, should be 100 tiles wide by 100 tiles long, and that our tile size will be 32x32 pixels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_new_map.png&quot; alt=&quot;Tiled New Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should now notice on the right hand side of the screen, under the pane titled &lt;strong&gt;Layers&lt;/strong&gt; that there is an entry named &lt;em&gt;Tile Layer 1&lt;/em&gt;. Go ahead and rename this layer to &lt;em&gt;MyTerrain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_terrain_layer.png&quot; alt=&quot;Tiled New Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a layer to draw on, lets import the spritesheet that we saved earlier into our map editor. To do this, click the &lt;em&gt;New Tileset&lt;/em&gt; icon in the &lt;strong&gt;Tilesets&lt;/strong&gt; pane. Provide a name for your new tiletset and browse for the image containing our terrain graphics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_create_new_tileset.png&quot; alt=&quot;Tiled New Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Upon creating our new tileset, you should see your image loaded into the tileset pane, where you can select one or more tiles to paint with. Select a grass tile from the tileset pane and use the fill tool to fill the entire map.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_painting_texture.png&quot; alt=&quot;Tiled Painting Texture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the stamp brush at the top, along with the tiles in our tilemap to create your map on the created layer. Feel free to create additional layers to draw on. Each layer has it’s own properties, which are changeable in the bottom pane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_after_drawn.png&quot; alt=&quot;Tiled after drawn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to export the map. Go to File &amp;gt; Export As &amp;gt; and save the file as type &lt;strong&gt;json&lt;/strong&gt;. For the sake of the tutorial, I’ll be naming this file firstMap. Doing this will produce a firstMap.json file that will provide phaser with the information necessary to take a single image and piece it together by individual 32x32px tiles.&lt;/p&gt;

&lt;h4 id=&quot;importing-the-map-into-phaser&quot;&gt;Importing the map into Phaser&lt;/h4&gt;

&lt;p&gt;Lets review what we’ve done so far. First we created the basic foundation for our phaser project by using phaser’s Game class. We wired up the event handlers that will take care of the preload, create, and update events, however we’ve yet to fill in our logic for these methods. We’ve used the Tiled Map Editor to create a basic map for phaser and we have exported that tilemap as a json file that is ready to be consumed by phaser.&lt;/p&gt;

&lt;p&gt;Lets start by telling phaser to load our image and tilemap resources when it starts. To do so, add the following code (lines 2 and 3) to the preload method that we created earlier. Change the paths that I have provided to the paths where your json and png files reside.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MyTilemap&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/images/maps/firstMap.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TILED_JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tiles&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/images/terrain_atlas.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What this will first do is tell the game object to load the tilemap firstMap.json and give it an alias as MyTilemap, which we’ll be able to refer to it later with.&lt;/p&gt;

&lt;p&gt;Secondly, we tell the game object to load the image that we used to create our map, &lt;em&gt;terrain_atlas.png&lt;/em&gt;. If you’ll recall, &lt;em&gt;tiles&lt;/em&gt; is the name that we provided to the map editor when creating our tileset, as it’s important that the first parameter of this call matches the name of the tileset that you created. Loading these objects up front, in our preload function, will cache them for when we need to access them later.&lt;/p&gt;

&lt;p&gt;Next, we’ll set up the create method to create the map.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Load the map.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MyTilemap&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTilesetImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tiles&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;tiles&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MyTerrain&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resizeWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCursorKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we’ll add some logic in our update method to handle the keyboard input that we added above in our create method. This will allow us to use the arrows keys to move within the map from the browser.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Load the game in your browser, and if all is correct then you should see your map displayed within your browser, like so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/tiled_map_in_browser.png&quot; alt=&quot;Tiled New Map&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Mar 2015 00:00:00 -0600</pubDate>
        <link>http://brandonclapp.com/creating-and-importing-a-map-for-phaser-using-tiled/</link>
        <guid isPermaLink="true">http://brandonclapp.com/creating-and-importing-a-map-for-phaser-using-tiled/</guid>
        
        <category>PhaserJS</category>
        
        <category>Game-Dev</category>
        
        
        <category>game-dev</category>
        
      </item>
    
      <item>
        <title>16 Ways to Become a Better Developer</title>
        <description>&lt;h4 id=&quot;find-some-mentors1name1&quot;&gt;&lt;a href=&quot;#1&quot; name=&quot;1&quot;&gt;1. Find some Mentors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Make a list of developers that you admire and study them. Learn things from them such as how they debug problems and what tools and technologies they’re using. Follow these developers on Twitter and subscribe to their blog’s RSS feed. Whenever they post something new, take the time to actually read and comprehend what they’re trying to convey.&lt;/p&gt;

&lt;h4 id=&quot;become-a-mentor2name2&quot;&gt;&lt;a href=&quot;#2&quot; name=&quot;2&quot;&gt;2. Become a Mentor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While or after learning something new, share what you’ve learned. Don’t think you have anything to contribute? Wrong. Even if you’re a beginner web developer and only understand HTML, there is someone out there who is interested in learning that particular subject from someone who won’t throw a bunch of hard to understand, technical terms at them. Don’t present yourself as an expert, but rather as someone who is just trying to share your experiences and help other’s where you can.&lt;/p&gt;

&lt;blockquote&gt;If you can&#39;t explain it simply, you don&#39;t understand it well enough. - Albert Einstein&lt;/blockquote&gt;

&lt;h4 id=&quot;learn-about-your-craft-every-day3name3&quot;&gt;&lt;a href=&quot;#3&quot; name=&quot;3&quot;&gt;3. Learn about your craft every day&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Spend 15 to 30 minutes per day learning something new about the tools that you use every day, whether it be your programming language of choice, shortcuts for your text editor, how to make your code more performant, or whatever you’re interested in. Keep a running list about topics that you want to research and spend a little bit of time each day conquering this list.&lt;/p&gt;

&lt;h4 id=&quot;learn-some-design-patterns4name4&quot;&gt;&lt;a href=&quot;#4&quot; name=&quot;4&quot;&gt;4. Learn some design patterns&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Development is more than just writing functional code. Experienced software developers know how to architect their code so that it’s maintainable, flexible, and easy to understand. Fortunately, you don’t have to reinvent the wheel. Software development design patterns are best practice solutions for architecting systems. As always, there are different tools for different jobs. Knowing when to use the right tool for the right job comes with practice and experience.&lt;/p&gt;

&lt;h4 id=&quot;know-your-tools5name5&quot;&gt;&lt;a href=&quot;#5&quot; name=&quot;5&quot;&gt;5. Know your tools&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Imagine a carpenter who didn’t know how to use a hammer, a doctor who didn’t know how to use a stethoscope, or a truck driver who didn’t know how to drive a truck. A software developer who doesn’t know how to use their tools also fits into the same category. Take some time to learn your IDE, text editor, operating system, database, and libraries.&lt;/p&gt;

&lt;h4 id=&quot;come-up-with-your-own-solution6name6&quot;&gt;&lt;a href=&quot;#6&quot; name=&quot;6&quot;&gt;6. Come up with your own solution&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sure, it’s easy to enter a few words into a search engine, click the top stack overflow result, and copy/paste the answer into your project. &lt;strong&gt;Doing this isn’t making you a better developer&lt;/strong&gt;, it’s making you a better Googler. The next time you have an itch to search for something, try solving it by yourself first. Not only will you be practicing your troubleshooting skills, you’ll also be more likely to remember the answer when you figure it out. Of course, don’t waste too much time. The internet is a valuable resource, but remember to &lt;strong&gt;think for yourself&lt;/strong&gt;, too!&lt;/p&gt;

&lt;p&gt;Have you come up with your own solution but someone is telling you it’s wrong? See &lt;a href=&quot;#11&quot;&gt;#11&lt;/a&gt;. Also see &lt;a href=&quot;#7&quot;&gt;#7&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;have-strong-opinions-but-hold-on-to-them-loosely7name7&quot;&gt;&lt;a href=&quot;#7&quot; name=&quot;7&quot;&gt;7. Have strong opinions, but hold on to them loosely&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Don’t be afraid of expressing your opinions, but also be ready to change your opinions if provided with sufficient evidence. To be a good developer, you have to take a stance on what you think is the right way to develop software. This, fundamentally, not only applies to software development, but in all aspects of life. Taking a stance that you can back with solid evidence and reasoning will gain you the respect and consideration of others. However, be prepared to change your opinion when presented with reasoning. Consider other people’s opinions and reasoning. If convinced, perhaps it’s time to adopt some new opinions.&lt;/p&gt;

&lt;h4 id=&quot;write-code-every-day8name8&quot;&gt;&lt;a href=&quot;#8&quot; name=&quot;8&quot;&gt;8. Write code every day.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;As the old saying goes, practice makes perfect. A runner doesn’t get good at running by not running. A basketball player doesn’t get good by not playing. The only way to get good at solving problems is to practice solving problems. Study your craft. Take pride in becoming a better programmer and problem solver. Understand how to use various constructs in your programming language of choice to solve problems in different ways.&lt;/p&gt;

&lt;h4 id=&quot;read9name9&quot;&gt;&lt;a href=&quot;#9&quot; name=&quot;9&quot;&gt;9. Read!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;One of the most common characteristics amongst successful people is that they read. Your education doesn’t have to stop when you leave work. Keep a book by your bedside and pick it up a few times a week. I decided to make this a separate step from bullet point &lt;a href=&quot;#3&quot;&gt;#3&lt;/a&gt; because I consider this point to be a bit more in depth and beneficial to your life and career as a whole, where as I see &lt;a href=&quot;#3&quot;&gt;#3&lt;/a&gt; as reading a quick blog post about some cool tip, trick, library, or framework.&lt;/p&gt;

&lt;p&gt;If you’re stuck on not knowing what to read, check out some of &lt;a href=&quot;/about/recommended-reading/&quot;&gt;my personal recommendations&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;just-because-you-can-doesnt-mean-that-you-should10name10&quot;&gt;&lt;a href=&quot;#10&quot; name=&quot;10&quot;&gt;10. Just because you can, doesn’t mean that you should&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Lets face it, we’ve all seen THAT application. You know, the one that you’re assigned to maintain and makes you reconsider your career as a software developer. Just because you &lt;em&gt;can&lt;/em&gt; write your entire application in one line, doesn’t mean that you &lt;em&gt;should&lt;/em&gt;. Just because you &lt;em&gt;can&lt;/em&gt; inject 20 parameters to one class’s constructor, doesn’t mean that you &lt;em&gt;should&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Weigh the pro’s and con’s of some of the things that you’re currently doing. In some cases, we do things simply because that’s how we have been doing them for years. Check a list of some of the most common code smells and question some of the things that you’re currently doing. Perhaps there’s a better way of writing something than you currently are, or perhaps you have great reasoning behind why you’re case is unique.&lt;/p&gt;

&lt;h4 id=&quot;always-remember-that-youre-entitled-to-your-own-opinion11name11&quot;&gt;&lt;a href=&quot;#11&quot; name=&quot;11&quot;&gt;11. Always remember that you’re entitled to your own opinion&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;One trap that developers sometimes fall into is thinking that if someone else, especially if that someone is popular, highly credible, or experienced, says that something is true, then it must be. Take everything that you read with a grain of salt and question what you’re reading. Try understanding why the author has the point of view that they do. This is a skill that grows over time. The more you practice your craft, the more confident you’ll be about your abilities.&lt;/p&gt;

&lt;h4 id=&quot;talk-is-cheap-show-me-the-code12name12&quot;&gt;&lt;a href=&quot;#12&quot; name=&quot;12&quot;&gt;12. Talk is cheap, show me the code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;There are a lot of people out there who will tell you that something can’t be done because of X, Y, and Z. There are other people out there who will tell you that something is simple, all you have to do is A, B, and C.&lt;/p&gt;

&lt;p&gt;My point is, don’t gauge the difficult on a set of tasks simply based off of someone else’s quickly contrived assumptions. &lt;strong&gt;Think for yourself&lt;/strong&gt;, lay out the steps necessary, do your research, find ways around your obstacles, and write the code.&lt;/p&gt;

&lt;h4 id=&quot;dont-be-afraid-to-take-on-a-challenge13name13&quot;&gt;&lt;a href=&quot;#13&quot; name=&quot;13&quot;&gt;13. Don’t be afraid to take on a challenge&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Learning happens when we’re challenged. Take on new challenges and rise to the occasion. You may be presented with unique problems that you wouldn’t have encountered otherwise. Tackling unique challenges now will give you a new perspective when solving future problems, even if they may not seem similar at first.&lt;/p&gt;

&lt;h4 id=&quot;keep-it-simple-stupid14name14&quot;&gt;&lt;a href=&quot;#14&quot; name=&quot;14&quot;&gt;14. Keep it Simple, Stupid.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stop over-engineering! Not everything require 10 ajax calls, 5 database tables, 3 stored procedures, and 6 Microsoft acronyms. Lets face it, 9 times out of 10 it’s not going to get documented properly anyway, and even if it did, do you really want each new developer who works on the project to burn multiple hours just reading the documentation before they can even remotely comprehend how the system is supposed to work? Solve the simple case first. If additional features are needed in the future, handle them then. Don’t implement features just because there’s a &lt;em&gt;chance&lt;/em&gt; that they’ll eventually be requested.&lt;/p&gt;

&lt;h4 id=&quot;whiteboard-things-out15name15&quot;&gt;&lt;a href=&quot;#15&quot; name=&quot;15&quot;&gt;15. Whiteboard things out&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Putting ideas on a whiteboard and asking for other’s input is a great way to get feedback. From my experience, when whiteboarding, three possible things typically end up happening.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The other person ends up teaching you something.&lt;/li&gt;
  &lt;li&gt;You end up teaching the other person something, which requires an explanation on how components work, which in turn will reinforce that you do (or don’t) understand the topic.&lt;/li&gt;
  &lt;li&gt;A debate (not argument) is started, which leads to possibly important factors that were not considered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whiteboards provide a great way to communicate ideas that are otherwise hard to explain with words alone.&lt;/p&gt;

&lt;h4 id=&quot;dont-be-afraid-to-ask-for-help16name16&quot;&gt;&lt;a href=&quot;#16&quot; name=&quot;16&quot;&gt;16. Don’t be afraid to ask for help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Simply put, ask if you need help. Don’t spend too much time on a single topic if someone else can explain it better in a fractions time. There’s nothing wrong with saying “I don’t understand this, can you please help me out?”. No one is an expert at everything.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2015 00:00:00 -0600</pubDate>
        <link>http://brandonclapp.com/16-ways-to-become-a-better-developer/</link>
        <guid isPermaLink="true">http://brandonclapp.com/16-ways-to-become-a-better-developer/</guid>
        
        <category>self-improvement</category>
        
        
      </item>
    
      <item>
        <title>Common List of Mac Keyboard Shortcuts</title>
        <description>&lt;p&gt;Learning keyboard shortcuts and getting familiar with your tools are great ways to be more productive. Keyboard shortcuts not only minimize the amount of time that you’re navigating your cursor, but also become second nature to getting around your OS, documents, and applications. Here are a few shortcuts that I use on a regular basis. I’ll keep this post updated as I find myself using shortcuts that aren’t documented here. Leave a comment and let me know if there are any here that you use that I’ve left out.&lt;/p&gt;

&lt;h4 id=&quot;general-os-shortcuts&quot;&gt;General OS Shortcuts&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Shortcut&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Q&lt;/td&gt;
      &lt;td&gt;Close the current application&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + S&lt;/td&gt;
      &lt;td&gt;Save&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + A&lt;/td&gt;
      &lt;td&gt;Select all&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + 3&lt;/td&gt;
      &lt;td&gt;Capture the screen to a file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + Ctrl + 3&lt;/td&gt;
      &lt;td&gt;Capture the screen to your clipboard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + 4&lt;/td&gt;
      &lt;td&gt;Capture a section of the screen to a file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + Ctrl + 4&lt;/td&gt;
      &lt;td&gt;Capture a section of the screen to your clipboard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Z&lt;/td&gt;
      &lt;td&gt;Undo last action&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + Z&lt;/td&gt;
      &lt;td&gt;Redo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;document-editing&quot;&gt;Document Editing&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Shortcut&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + C&lt;/td&gt;
      &lt;td&gt;Copy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + V&lt;/td&gt;
      &lt;td&gt;Paste&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + X&lt;/td&gt;
      &lt;td&gt;Cut&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + left arrow&lt;/td&gt;
      &lt;td&gt;Go to the beginning of the current line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + right arrow&lt;/td&gt;
      &lt;td&gt;Go to the end of the current line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + up arrow&lt;/td&gt;
      &lt;td&gt;Go to the beginning of the current document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + down arrow&lt;/td&gt;
      &lt;td&gt;Go to the end of the current document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fn + Shift + right arrow&lt;/td&gt;
      &lt;td&gt;Select all text to the end of the document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fn + Shift + left arrow&lt;/td&gt;
      &lt;td&gt;Select all text to the beginning of document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Option + right arrow&lt;/td&gt;
      &lt;td&gt;Go to the beginning of the next word&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Option + left arrow&lt;/td&gt;
      &lt;td&gt;Go to the beginning of the previous word&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + left arrow&lt;/td&gt;
      &lt;td&gt;Select all text to the beginning of the current line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + right arrow&lt;/td&gt;
      &lt;td&gt;Select all text to the end of the current line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Option + Delete&lt;/td&gt;
      &lt;td&gt;Delete last word&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;google-chrome&quot;&gt;Google Chrome&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Shortcut&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + T&lt;/td&gt;
      &lt;td&gt;Open a new tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Option + right arrow&lt;/td&gt;
      &lt;td&gt;Go to the next tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Option + left arrow&lt;/td&gt;
      &lt;td&gt;Go to the previous tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + F&lt;/td&gt;
      &lt;td&gt;Find in page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + R&lt;/td&gt;
      &lt;td&gt;Reload the current page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + T&lt;/td&gt;
      &lt;td&gt;Re-open closed tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + left arrow&lt;/td&gt;
      &lt;td&gt;Back&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + right arrow&lt;/td&gt;
      &lt;td&gt;Forward&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + #1-9&lt;/td&gt;
      &lt;td&gt;Go to a specific tab&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;sublime-text-3&quot;&gt;Sublime Text 3&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Shortcut&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + P&lt;/td&gt;
      &lt;td&gt;Search all files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + P&lt;/td&gt;
      &lt;td&gt;Search entire editor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + F&lt;/td&gt;
      &lt;td&gt;Find&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + Shift + F&lt;/td&gt;
      &lt;td&gt;Find &amp;amp; Replace&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cmd + K + B&lt;/td&gt;
      &lt;td&gt;Show/hide sidebar&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 05 Mar 2015 00:00:00 -0600</pubDate>
        <link>http://brandonclapp.com/common-list-of-mac-keyboard-shortcuts/</link>
        <guid isPermaLink="true">http://brandonclapp.com/common-list-of-mac-keyboard-shortcuts/</guid>
        
        <category>Mac</category>
        
        <category>productivity</category>
        
        <category>shortcuts</category>
        
        
        <category>Mac</category>
        
      </item>
    
      <item>
        <title>Performing AJAX Http Requests with AngularJS</title>
        <description>&lt;p&gt;One of the great things about AngularJS is all of the great services that it comes with out of the box. One of these happens to be the $http service, which allows you to easily create http requests from any controller just by injecting it to the controllers constructor.&lt;/p&gt;

&lt;p&gt;I’ll quickly demonstrate how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; service in order to create ajax requests from you angular controller.&lt;/p&gt;

&lt;p&gt;First, add $http as a parameter to your controller’s constructor so that angular can properly inject it and make it accessible inside of your controller.&lt;/p&gt;

&lt;h4 id=&quot;get&quot;&gt;GET&lt;/h4&gt;

&lt;p&gt;Next, we’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http.get&lt;/code&gt; method, which will return a promise.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://api.github.com/users/brandonclapp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;success response: &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;error response: &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the code above, we’re able to resolve the promise return from our &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; function with the success method. By altering the url to be invalid, you’ll see that the error method is fired instead. An alternative way of resolving the promise is with the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you only specify one parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, you will only catch the success response. In order to account for errors, you’ll need to provide a second function, like so.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all is good&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;an error occurred&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;post-put--delete&quot;&gt;POST, PUT, &amp;amp; DELETE&lt;/h4&gt;

&lt;p&gt;POST, PUT, and DELETE are all very similar, so there’s no point in each of them having their own heading.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; method, except it also accepts an object to be posted along with the url.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://httpbin.org/post&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example prop&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all is good&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;an error occurred&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;put&lt;/code&gt; is almost interchangeable with post, but it’s probably a good idea to specify some sort of Id so that you know what to update on the receiving end.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://httpbin.org/put&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;myProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example prop updated&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all is good&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;an error occurred&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; is very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, because we don’t specify a data object with our request. Although we don’t provide a data object, it would still be possible to pass query string parameters along with your url in order to know which record to delete. (i.e. …com/delete?id=100)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://httpbin.org/delete?Id=100&amp;amp;somethingElse=whatever&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all is good&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;an error occurred&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 00:00:00 -0600</pubDate>
        <link>http://brandonclapp.com/performing-ajax-http-requests-with-angularjs/</link>
        <guid isPermaLink="true">http://brandonclapp.com/performing-ajax-http-requests-with-angularjs/</guid>
        
        <category>AngularJS</category>
        
        <category>AJAX</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>Beginner&#39;s guide to setting up an AngularJS project</title>
        <description>&lt;p&gt;AngularJS is a great framework, which I’ve had the opportunity to use on many projects. Having two way data binding between your UI and your javascript objects is a really great feature that I find myself missing when I’m not using Angular. Here, I’ll attempt to go through the steps required to get up and running with your first Angular application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The following article targets angular 1.x. This example is incompatible with Angular 2.&lt;/p&gt;

&lt;p&gt;The first step of using any javascript library is, of course, to first download it, put it in a directory within your project, and reference it from your markup. For simplicity, I will reference the script from a CDN.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok great, we have angular referenced from our project, but now how do we use it? The first step that I typically take is to create a script which will act as the main entry point into my application. I typically name this file App.js, but you’re free to name it whatever you like.&lt;/p&gt;

&lt;h4 id=&quot;creating-the-app-module&quot;&gt;Creating the App Module&lt;/h4&gt;

&lt;p&gt;Inside of App.js, we we first need to create a variable which will give us a reference to angular. Once this file is created, add the following line.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MyAngularApp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because we included angular, there should be an object named angular on the window object which is accessible. What we’re effectively doing here is creating a variable which houses a reference to an angular module. We won’t dig too much into modules, but just know that your angular application will be linked to this module that we have just created. In fact, if you’re just beginning, it may make more sense if you name this variable “app”, as it will basically just be referring to your application.&lt;/p&gt;

&lt;p&gt;Also, note that the 2nd parameter of the module function takes an empty array. Be sure to include this empty array parameter, as there is also an overload, which takes a single string parameter, that will allow you to “get” a reference of your module rather than create one.&lt;/p&gt;

&lt;h4&gt;Creating our first controller&lt;/h4&gt;

&lt;p&gt;Now that we have a variable for our angular app, we need to create a controller, then attach it to our app variable.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainCtrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MainCtrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our controller now has a reference (mainCtrl) and we have added it to our app with the controller method on our app module. The second parameter, “MainCtrl”, is the string to which we can refer to our controller if we need it in the future. You’re also probably wondering what this $scope parameter is on our controller. &lt;strong&gt;$scope&lt;/strong&gt; is a built in angular service, which can be injected into any controller simply by adding it to that controllers constructor. Later, we will use the scope as a means to take advantage of two way data binding between our javascript and UI.&lt;/p&gt;

&lt;h4 id=&quot;referencing-angular-from-the-ui&quot;&gt;Referencing Angular from the UI&lt;/h4&gt;

&lt;p&gt;Now that we have our App.js script set up in our project, we need to add a reference to it inside of our UI markup. Go ahead and add the App.js script to your HTML, ensuring that it loads after angular has loaded.&lt;/p&gt;

&lt;p&gt;In addition to adding the script reference, we’re going to add a couple of angular directives close to where we are currently working, on our opening html tag. Here, we’ll add the &lt;strong&gt;ng-app&lt;/strong&gt; and &lt;strong&gt;ng-controller&lt;/strong&gt; directives, which will notify angular which app and controller to use. Afterwards, we should have something resembling this.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyAngularApp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Alter the paths so that they reflect where your scripts are. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/Scripts/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/Scripts/Angular/App.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what exactly have we done here? Let me preface this explanation by first saying that angular directives are simply &lt;a href=&quot;http://www.w3schools.com/html/html_attributes.asp&quot; target=&quot;_blank&quot;&gt;HTML attributes&lt;/a&gt;. The difference between angular directives and standard W3C attributes is that angular directives are processed by the angular framework and the &lt;a href=&quot;http://www.w3.org/TR/html4/index/attributes.html&quot; target=&quot;_blank&quot;&gt;standard html attributes&lt;/a&gt; are processed by the browser. Angular directives native to angular will start with &lt;strong&gt;ng-&lt;/strong&gt;, however it is possible to make your own custom directives that may not adhere to this convention.&lt;/p&gt;

&lt;p&gt;In the code above, we told the angular framework that we have set up an angular app (module) called “MyAngularApp” using the ng-app directive, as well as a controller named “MainCtrl” (which has also been added to our app module) using the ng-controller directive. Now, anything between our opening and closing html elements will have access to the “MainCtrl” controller in the “MyAngularApp” module. If you only wanted angular to be accessible to a smaller range of html elements, you would apply the ng-app directive to top most parent element that you wanted to use angular in, such as the body tag or even a div tag within the body. For our example, we’ll use angular on our entire page.&lt;/p&gt;

&lt;p&gt;Because we’ve specified &amp;lt;pre&amp;gt;ng-controller=”MainCtrl”&amp;lt;/pre&amp;gt; on our html element, we will only be using one controller in this example. This will be suitable for simple scenarios, but ideally for medium to large sized projects, you would want to create multiple controllers to handle different parts of your UI. Using multiple controllers requires introducing the concept of angular routing, which I’m not going to talk about right now.&lt;/p&gt;

&lt;h4&gt;Demonstrating Two Way Data Binding&lt;/h4&gt;

&lt;p&gt;What exactly is two way data binding? As we add properties to the $scope object within our controller, we can access those properties from our UI. Two way binding just means that when properties in the model ($scope) get updated, so does the UI. When UI elements get updated, the changes get propagated back to the model ($scope). Let me give an example. Add the following html to the body of your page.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Message: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a few things to talk about here. First, we see a new directive, &lt;strong&gt;ng-model&lt;/strong&gt;. The value of this directive, &lt;em&gt;message&lt;/em&gt;, is the property on our $scope that this UI element binds to. But wait, we haven’t initialized a $scope.message property in our controller. While we could have initialized the property, if the property doesn’t currently exist on our controller, it’ll be created automatically for us.&lt;/p&gt;

&lt;p&gt;Second, we see some funky looking brackets with our scope variable in them. Angular uses mustache syntax to evaluate it’s expressions. In this case, the expression evaluates to the value of our $scope.message property. Our $scope.message property gets updated through binding when we update our text box (because of the ng-model directive). In turn, when the property is updated, it is then immediately updated on the UI. Cool, huh?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/content/angular-two-way-binding.png&quot; alt=&quot;Angular two way data binding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s the basics of setting up a project and a quick introduction to some of the angular directives. Some common ones that I tend to use a lot are ng-hide, ng-show, ng-if, ng-repeat, ng-click, ng-include, and ng-class to name a few. I encourage starting with these. You would be surprised what you can do with just a few directives.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning how to do some more cool stuff with angular, I recommend learning &lt;a href=&quot;/performing-ajax-http-requests-with-angularjs&quot;&gt;how to perform ajax requests&lt;/a&gt; in order to interact with external applications/api’s.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 00:00:00 -0600</pubDate>
        <link>http://brandonclapp.com/beginners-guide-to-setting-up-an-angularjs-project/</link>
        <guid isPermaLink="true">http://brandonclapp.com/beginners-guide-to-setting-up-an-angularjs-project/</guid>
        
        <category>AngularJS</category>
        
        <category>project-setup</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
  </channel>
</rss>
